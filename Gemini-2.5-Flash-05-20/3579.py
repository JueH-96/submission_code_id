import itertools
from typing import List

class Solution:
    def maxGoodNumber(self, nums: List[int]) -> int:
        
        # Step 1: Convert each number in `nums` to its binary string representation.
        # We use slicing `[2:]` to remove the "0b" prefix generated by `bin()`.
        # For example, bin(1) is '0b1', bin(2) is '0b10', bin(3) is '0b11'.
        # After slicing, they become '1', '10', '11' respectively.
        binary_representations = [bin(n)[2:] for n in nums]
        
        # Initialize `max_decimal_value` to 0. Since all `nums[i]` are >= 1,
        # any valid concatenation will result in a positive binary string,
        # hence a positive decimal value.
        max_decimal_value = 0
        
        # Step 2: Generate all possible permutations of the binary string representations.
        # For an array of 3 elements, there are 3! = 6 permutations.
        for p in itertools.permutations(binary_representations):
            # `p` is a tuple containing the binary strings in a specific order.
            # Example: for [1, 2, 3], one `p` could be ('11', '1', '10')
            # corresponding to the order [3, 1, 2].
            
            # Step 3: Concatenate the binary strings in the current permutation.
            # "".join(p) efficiently joins the strings in the tuple.
            concatenated_binary_string = "".join(p)
            
            # Step 4: Convert the concatenated binary string to its decimal integer value.
            # `int(string, base)` converts a string representation of a number
            # in a given base to an integer. Here, the base is 2 for binary.
            current_decimal_value = int(concatenated_binary_string, 2)
            
            # Step 5: Update `max_decimal_value` if the current value is greater.
            if current_decimal_value > max_decimal_value:
                max_decimal_value = current_decimal_value
                
        # After checking all permutations, `max_decimal_value` will hold the
        # largest possible number.
        return max_decimal_value