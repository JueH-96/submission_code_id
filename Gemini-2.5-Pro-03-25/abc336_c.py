# YOUR CODE HERE
import sys

# Define the main function containing the solution logic
def solve():
    # Read the input integer N from standard input
    # N represents the rank of the desired good integer (1-based index).
    N = int(sys.stdin.readline())

    # Base case: The 1st smallest good integer (N=1) is 0.
    # Good integers are non-negative integers where all digits are even (0, 2, 4, 6, 8).
    if N == 1:
        print(0)
        return

    # For N > 1, the N-th smallest good integer is actually the (N-1)-th positive good integer.
    # We establish a mapping between positive integers k=1, 2, 3, ... and positive good integers 2, 4, 6, 8, 20, 22, ...
    # Let k = N - 1. We are looking for the k-th positive good integer (using 0-based indexing for k, corresponding to N-1).
    # The sequence of positive good integers can be generated by considering base 5 representation.
    # The k-th positive integer (1-based index) corresponds to the k-th positive good integer.
    # To find the k-th positive good integer (where k = N-1):
    # 1. Convert k to its base 5 representation. Let the digits be d_m, d_{m-1}, ..., d_0.
    # 2. Map each base 5 digit d_i (which is in {0, 1, 2, 3, 4}) to an even digit e_i = 2 * d_i.
    # 3. The sequence of even digits e_m, e_{m-1}, ..., e_0 forms the decimal representation of the desired good integer.
    
    k = N - 1
    
    # List to store the mapped digits (which will form the final decimal number).
    # We will build this list from least significant digit to most significant digit.
    mapped_digits = []
    
    # Use a temporary variable for the base conversion process to avoid modifying k.
    temp_k = k
    
    # Convert k to base 5 representation. While converting, map each base 5 digit d to 2*d.
    # Since N >= 2, we have k = N-1 >= 1. Therefore, temp_k starts as a positive integer.
    # The loop will execute at least once.
    while temp_k > 0:
        # Get the least significant digit in base 5 (remainder when divided by 5).
        remainder = temp_k % 5
        # Map the base 5 digit d (0,1,2,3,4) to the corresponding even digit 2*d (0,2,4,6,8).
        mapped_digit = remainder * 2
        # Append the string representation of the mapped digit to the list.
        mapped_digits.append(str(mapped_digit))
        # Remove the least significant digit from temp_k by integer division by 5.
        temp_k //= 5
    
    # The mapped_digits list currently holds the digits in reverse order 
    # (from least significant to most significant).
    # To form the correct decimal number, we need to reverse this list.
    # Example: If k=7, its base 5 representation is 12.
    # The loop processes remainder 2 then 1. mapped_digits becomes ['4', '2'].
    # Reversing gives ['2', '4'], which corresponds to the number 24.
    
    # Join the characters in the reversed list to form the final result string.
    result_str = "".join(mapped_digits[::-1])
    
    # Print the final result string to standard output.
    print(result_str)

# Execute the solve function to run the algorithm
solve()