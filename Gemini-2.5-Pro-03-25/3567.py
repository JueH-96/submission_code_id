import math # math module is not strictly necessary as bin() is a built-in function

class Solution:
    """
    This class provides a method to convert a date string in yyyy-mm-dd format
    to its binary representation as specified in the problem description.
    """
    def convertDateToBinary(self, date: str) -> str:
        """
        Converts a Gregorian calendar date string in yyyy-mm-dd format to its 
        binary representation format: binary_year-binary_month-binary_day.

        The binary representation for each component (year, month, day) is 
        obtained without any leading zeroes (excluding the standard '0b' prefix 
        generated by Python's bin() function).

        Args:
            date: A string representing the date in "yyyy-mm-dd" format.
                  Constraints guarantee this is a valid date between Jan 1st, 1900 
                  and Dec 31st, 2100, inclusive, and adheres to the format.

        Returns:
            A string representing the date in the specified binary format.
            Example: "2080-02-29" -> "100000100000-10-11101"
        """
        
        # 1. Split the input date string 'yyyy-mm-dd' into a list of strings 
        #    containing the year, month, and day components.
        #    Example: "2080-02-29" -> ['2080', '02', '29']
        parts = date.split('-')
        
        # 2. Create a list to store the binary representation of each part.
        binary_parts = []
        
        # 3. Iterate through the parts (year, month, day strings).
        for part_str in parts:
            # a. Convert the string representation of the number (e.g., '2080', '02')
            #    into an integer. The int() function handles potential leading 
            #    zeros in month/day strings correctly (e.g., int('02') -> 2).
            number_int = int(part_str)
            
            # b. Convert the integer into its binary string representation using 
            #    the built-in bin() function. bin() returns a string prefixed 
            #    with '0b' (e.g., bin(29) -> '0b11101').
            # c. Slice the resulting binary string starting from index 2 ([2:]) 
            #    to remove the '0b' prefix. This yields the required binary 
            #    representation without leading zeros (as required by the problem).
            #    Example: '0b11101'[2:] -> '11101'
            binary_str = bin(number_int)[2:]
            
            # d. Append the resulting binary string to the list.
            binary_parts.append(binary_str)
            
        # 4. Join the elements of the binary_parts list (which now contains 
        #    the binary strings for year, month, and day) using a hyphen '-' 
        #    as the separator.
        #    Example: ['100000100000', '10', '11101'] -> "100000100000-10-11101"
        result = "-".join(binary_parts)
        
        # 5. Return the final formatted binary date string.
        return result

# # Example Usage (for testing purposes):
# sol = Solution()
# print(f"Input: '2080-02-29', Output: '{sol.convertDateToBinary('2080-02-29')}'") 
# # Expected: 100000100000-10-11101
# print(f"Input: '1900-01-01', Output: '{sol.convertDateToBinary('1900-01-01')}'") 
# # Expected: 11101101100-1-1

# # Alternative concise implementation using list comprehension:
# class SolutionConcise:
#     def convertDateToBinary(self, date: str) -> str:
#         # Split, convert to int, convert to binary (removing '0b'), all in one expression
#         binary_parts = [bin(int(part))[2:] for part in date.split('-')]
#         # Join the parts with hyphens
#         return "-".join(binary_parts)